// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mock/mock.go storage
//
// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/romandnk/todo/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTask) CreateTask(ctx context.Context, task entity.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskMockRecorder) CreateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTask)(nil).CreateTask), ctx, task)
}

// DeleteTaskByID mocks base method.
func (m *MockTask) DeleteTaskByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByID indicates an expected call of DeleteTaskByID.
func (mr *MockTaskMockRecorder) DeleteTaskByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByID", reflect.TypeOf((*MockTask)(nil).DeleteTaskByID), ctx, id)
}

// GetAllTasks mocks base method.
func (m *MockTask) GetAllTasks(ctx context.Context, statusID, limit, lastID int, date time.Time) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx, statusID, limit, lastID, date)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskMockRecorder) GetAllTasks(ctx, statusID, limit, lastID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTask)(nil).GetAllTasks), ctx, statusID, limit, lastID, date)
}

// GetTaskByID mocks base method.
func (m *MockTask) GetTaskByID(ctx context.Context, id int) (entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", ctx, id)
	ret0, _ := ret[0].(entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskMockRecorder) GetTaskByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTask)(nil).GetTaskByID), ctx, id)
}

// UpdateTaskByID mocks base method.
func (m *MockTask) UpdateTaskByID(ctx context.Context, id int, task entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskByID", ctx, id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskByID indicates an expected call of UpdateTaskByID.
func (mr *MockTaskMockRecorder) UpdateTaskByID(ctx, id, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskByID", reflect.TypeOf((*MockTask)(nil).UpdateTaskByID), ctx, id, task)
}

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// CreateStatus mocks base method.
func (m *MockStatus) CreateStatus(ctx context.Context, status entity.Status) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockStatusMockRecorder) CreateStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockStatus)(nil).CreateStatus), ctx, status)
}

// GetAllStatuses mocks base method.
func (m *MockStatus) GetAllStatuses(ctx context.Context) ([]*entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStatuses", ctx)
	ret0, _ := ret[0].([]*entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStatuses indicates an expected call of GetAllStatuses.
func (mr *MockStatusMockRecorder) GetAllStatuses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStatuses", reflect.TypeOf((*MockStatus)(nil).GetAllStatuses), ctx)
}

// GetStatusByID mocks base method.
func (m *MockStatus) GetStatusByID(ctx context.Context, id int) (entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByID", ctx, id)
	ret0, _ := ret[0].(entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByID indicates an expected call of GetStatusByID.
func (mr *MockStatusMockRecorder) GetStatusByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByID", reflect.TypeOf((*MockStatus)(nil).GetStatusByID), ctx, id)
}

// GetStatusByName mocks base method.
func (m *MockStatus) GetStatusByName(ctx context.Context, name string) (entity.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByName", ctx, name)
	ret0, _ := ret[0].(entity.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByName indicates an expected call of GetStatusByName.
func (mr *MockStatusMockRecorder) GetStatusByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByName", reflect.TypeOf((*MockStatus)(nil).GetStatusByName), ctx, name)
}
