{
    "swagger": "2.0",
    "info": {
        "description": "Swagger API for Golang Project TODO.",
        "title": "TODO App Swagger",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API [Roman] Support"
        },
        "license": {
            "name": "romandnk",
            "url": "https://github.com/romandnk/todo"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1/",
    "paths": {
        "/statuses/": {
            "post": {
                "description": "Create new task status.",
                "tags": [
                    "Status"
                ],
                "summary": "CreateStatus",
                "parameters": [
                    {
                        "description": "Required JSON body with status name",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/statusservice.CreateStatusParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status was created successfully",
                        "schema": {
                            "$ref": "#/definitions/statusservice.CreateStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            }
        },
        "/tasks/": {
            "get": {
                "description": "Get tasks with filtration by status name or date and pagination with limit.",
                "tags": [
                    "Task"
                ],
                "summary": "Get tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "tasks limit on the page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "last task id for getting next page",
                        "name": "last-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "task status name for filtering",
                        "name": "status-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date for getting task by date in RFC3339 format",
                        "name": "date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks were gotten successfully",
                        "schema": {
                            "$ref": "#/definitions/taskservice.GetAllTasksResponse"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new task.",
                "tags": [
                    "Task"
                ],
                "summary": "Create task",
                "parameters": [
                    {
                        "description": "Required JSON body with all required task field",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/taskservice.CreateTaskParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Task was created successfully",
                        "schema": {
                            "$ref": "#/definitions/taskservice.CreateTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            }
        },
        "/tasks/:id": {
            "get": {
                "description": "Get task by its id.",
                "tags": [
                    "Task"
                ],
                "summary": "Get task by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Required task id for getting",
                        "name": "params",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task was received successfully",
                        "schema": {
                            "$ref": "#/definitions/taskservice.GetTaskWithStatusNameModel"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete task by its id.",
                "tags": [
                    "Task"
                ],
                "summary": "Delete task by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Required task id for deleting",
                        "name": "params",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task was deleted successfully"
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update task selected fields by its id.",
                "tags": [
                    "Task"
                ],
                "summary": "Update task by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Required task id for updating",
                        "name": "params",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Required JSON body with necessary fields to update",
                        "name": "params",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/taskservice.UpdateTaskByIDParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task was updated successfully"
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/v1.response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "statusservice.CreateStatusParams": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "statusservice.CreateStatusResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "taskservice.CreateTaskParams": {
            "type": "object",
            "required": [
                "date",
                "description",
                "status_name",
                "title"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "taskservice.CreateTaskResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "taskservice.GetAllTasksResponse": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/taskservice.GetTaskWithStatusNameModel"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "taskservice.GetTaskWithStatusNameModel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "taskservice.UpdateTaskByIDParams": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "v1.response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}